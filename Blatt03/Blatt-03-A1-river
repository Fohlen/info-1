;; Die ersten drei Zeilen dieser Datei wurden von DrRacket eingefügt. Sie enthalten Metadaten
;; über die Sprachebene dieser Datei in einer Form, die DrRacket verarbeiten kann.
#reader(lib "DMdA-beginner-reader.ss" "deinprogramm")((modname Blatt-03-A1-river) (read-case-sensitive #f) (teachpacks ((lib "image2.rkt" "teachpack" "deinprogramm") (lib "universe.rkt" "teachpack" "deinprogramm"))) (deinprogramm-settings #(#f write repeating-decimal #f #t none explicit #f ((lib "image2.rkt" "teachpack" "deinprogramm") (lib "universe.rkt" "teachpack" "deinprogramm")))))
; JWanner & lenny
; Blatt03-A1-river

; Aufgabe 1

(define fluss-strecke 400)
(define wasserfall-strecke 200)
(define fluss-farbe (make-color 0 0 150))

; (a)
; Prüft ob der Kapitän eines Schiffes mit Geschwindigkeit v_schiff, während v_fluss das Schiff abtreibt, es ans andere Ufer schafft bevor er den Wasserfall hinunter stürtzt.

(: plunges? (real real -> boolean))
(check-expect (plunges? 5 1.5) #f)
(check-expect (plunges? 5 5) #t)
(define plunges?
  (lambda (v_schiff v_fluss)
    (< wasserfall-strecke (drift v_schiff v_fluss fluss-strecke))))

(: drift (real real real -> real))
(check-within (drift 5 1.5 200) 60 0.001)
(check-within (drift 5 3 200) 120 0.001)
(define drift
  (lambda (v_schiff v_fluss s)
    (* (/ s v_schiff) v_fluss)))


; (b)
; Zeichnet die Position des Schiffes zum Zeitpunkt t.
(: crossing ( natural -> image))
(define crossing
  (lambda (t)
    (clear-pinhole
      (overlay/pinhole
        (boat-at t)
        (fluss t)
        (fluss-ufer t)))))

(define fluss-ufer
  (lambda (t)
    (rectangle 500 200 "solid" "green")))

(define fluss
  (lambda (t)
    (rectangle 400 200 "solid" "blue")))

; Für eine Zeit t wird die Position des Schiffes zurückgegeben. 
(define boat-at
  (lambda (t)
   (put-pinhole (- 200
                    (* 5 t))
                 (- 100 
                    (drift 5 1.5 (* 5 t)))
                 (circle 5 "solid" "black")
                 )))
(crossing 0)
(crossing 80)
(animate crossing)


